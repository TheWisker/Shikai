name: aur-update
run-name: AUR package update by ${{ github.actor }} release
on:
  release:
    types: [published]
permissions:
  contents: write
concurrency:
  group: "aur"
  cancel-in-progress: true
jobs:
  aur-update:
    environment:
      name: aur-packages
    runs-on: ubuntu-latest
    container:
      image: archlinux
      options: --privileged
    steps:
      - name: Setup Runtime
        env:
          aur_key: ${{ secrets.AUR_KEY }}
          aur_public_key: ${{ secrets.AUR_PKEY }}
        run: |
          pacman -Syy --noconfirm --needed base-devel git openssh
          
          echo "Installed Runtime Packages"

          mkdir -p /root/.ssh/

          echo "Host *
          	IdentityFile /root/.ssh/aur
          	StrictHostKeyChecking no
          	UserKnownHostsFile /dev/null
           " > /root/.ssh/config
           
          echo "${aur_key}" > /root/.ssh/aur
          echo "${aur_public_key}" > /root/.ssh/aur.pub
          
          chmod 0700 /root/.ssh/aur
          chmod 0700 /root/.ssh/aur.pub
          
          echo "Configured SSH Credentials"
      
      - name: Configure Git Credentials
        shell: bash
        env:
          username: ${{ github.actor }}
          email: TheWisker@protonmail.com
          repo_name: ${{ github.event.repository.name }}
        run: |
          git config --global user.name $username
          git config --global user.email $email
          git config --global init.defaultBranch master
          git config --global --add safe.directory /__w/$repo_name/$repo_name
          
          echo "Configured Git Credentials"

      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Update local from AUR
        shell: bash
        env:
          aur_folder: ./aur
        run: |
          mv ./.git ./.not_git
          
          for folder in $aur_folder/*/; do
            pushd $folder
            
            folder_name=$(basename "${folder}")
            
            git init
            git remote add aur ssh://aur@aur.archlinux.org/$folder_name.git
            git fetch
              
            mkdir ./_tmp

            for file in $(find . -mindepth 1 -maxdepth 1 -not -name ".git" -not -name "_tmp"); do
               mv "$file" ./_tmp
            done
              
            git pull aur master

            for file in $(find ./_tmp -mindepth 1 -maxdepth 1); do
              if ! [[ -f "./$(basename "$file")" ]]; then
                mv "$file" .
              fi
            done
              
            rm -fr ./_tmp
              
            echo "Updated local $folder_name from AUR"
              
            popd
          done
          
        
      - name: Update PKGBUILDs and .SRCINFOs
        shell: bash
        env:
          aur_folder: ./aur
          tag_name: ${{ github.event.release.tag_name }}
        run: |
          for folder in $aur_folder/*/; do
              
              #Check if PKGBUILD file exists in the folder
              if [[ -f "${folder}PKGBUILD" ]]; then
                # Replace the pkgrel value with the updated one
                sed -i "s/^pkgrel=.*/pkgrel=1/" "${folder}PKGBUILD"

                echo "Updated pkgrel to 1 in ${folder}PKGBUILD"

                # Replace the pkgver value with the updated one
                sed -i "s/^pkgver=.*/pkgver=$tag_name/" "${folder}PKGBUILD"
                  
                echo "Updated pkgver to $tag_name in ${folder}PKGBUILD"
              fi
                
              #Check if .SRCINFO file exists in the folder
              if [[ -f "${folder}.SRCINFO" ]]; then
                # Replace the pkgrel value with the updated one
                sed -i "s/^\([[:space:]]*pkgrel =\).*/\1 1/" "${folder}.SRCINFO"

                echo "Updated pkgrel to 1 in ${folder}.SRCINFO"

                # Replace the pkgver value with the updated one
                sed -i "s/^\([[:space:]]*pkgver =\).*/\1 $tag_name/" "${folder}.SRCINFO"
                sed -i "s/\(#tag=\).*$/\1$tag_name/" "${folder}.SRCINFO"
                  
                echo "Updated pkgver to $tag_name in ${folder}.SRCINFO"
              fi
          done

      - name: Update AUR
        shell: bash
        env:
          aur_folder: "./aur"
          tag_name: ${{ github.event.release.tag_name }}
        run: |          
          for folder in $aur_folder/*/; do
            
            # Only run if it has a PKGBUILD file
            if [[ -f "${folder}PKGBUILD" ]]; then
              # Only run if it has a .SRCINFO file
              if [[ -f "${folder}.SRCINFO" ]]; then
                pushd $folder

                if [[ -d "./.git" ]]; then
                  git add .
                  git commit -m "Github Automated: ${tag_name}"
                  git push --set-upstream aur master

                  rm -fr .git

                  echo $folder_name package was updated!
                fi

                popd
              else
                echo $folder_name package lacks a .SRCINFO file
                exit 1
              fi
            else
               echo $folder_name package lacks a PKGBUILD file
               exit 1
            fi 
          done

      - name: Update Repository
        shell: bash
        run: |
          mv ./.not_git ./.git
          
          git commit -am "Automatic AUR Update"
          git push
          
          echo "Updated Repository"
